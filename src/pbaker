#!/usr/bin/lua

--[[

Copyright (C) 2013 augmented logic dev@augmentedlogic.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
and associated documentation files (the "Software"), to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--]]

require 'posix'


local VERSION = "0.2"
local config = {}
local SIZES = { 0, 1024, 2048, 4096, 8192, 16384 }


--- 
-- @param command
function stdout(command)
  if config.verbose then
      print(command)
  end
  local f = io.popen(command)
  local l = f:read("*a")
  f:close()
return l
end


---
--
function help()
local out = [[
pbaker ]]..VERSION..[[  <dev@augmentedlogic.com>

Usage: pbaker [options]
Options:
    -f,--format  <image format>, default is "jpg"
    -i,--image   <path/to/image> image file 
    -t,--target  <path/to/directory> target directory
    -q, --quiet  be quiet
    -n, --nice   set the nice level for the imagemagick commands
    -m, --imtmp  set the imagemagick temporary directory
    -h, --help   prints this help
    -g, --quality set the image quality ( default is 85% )
    -v, --verbose all imagemagick commands will be printed to stdout
]]

io.write(out)
end


---
-- simple implementation of getopt
-- @param arg
function getargs(arg)
    local config = {}

    if arg[1] == "--help" or  arg[1] == "-h" then
        help()
        os.exit()
    else
     --- we do a pretty simple version of getopt here
     for i=1,table.getn(arg) do
         if arg[i] == "--help" or arg[i] == "-h" then
            help()
            os.exit()
         elseif arg[i] == "--image" or arg[i] == "-i" then
            config.image = arg[i+1]
         elseif arg[i] == "--target" or arg[i] == "-t" then
            config.target = arg[i+1]
         elseif arg[i] == "--format" or arg[i] == "-f" then
            config.format = arg[i+1]
         elseif arg[i] == "--quiet" or arg[i] == "-q" then
            config.quiet = true
         elseif arg[i] == "--verbose" or arg[i] == "-v" then
            config.verbose = true
         elseif arg[i] == "--imtmp" or arg[i] == "-m" then
            config.imtmp = arg[i+1]
         elseif arg[i] == "--nice" or arg[i] == "-n" then
            config.nice = arg[i+1]
         elseif arg[i] == "--quality" or arg[i] == "-g" then
            config.quality = arg[i+1].."%"
         end
    end


         -- we set defaults or exit if values are missing
         if not config.target then
            -- exit error "need to specify output directory"
            io.write("No target directory defined.\n")
            os.exit() 
         elseif not config.image then
            io.write("Missing parameter: no image defined.\n")
            os.exit()
         else
            local file = io.open(config.image)
            if file then
               file:close()
            else
               io.write("Image not found.\n")
               os.exit()
            end
         end
         config.format = config.format or "jpg"
         config.nice = config.nice or 0
         config.imtmp = config.imtmp or "./tmpd"
         config.tmpdir = "/tmp/pbaker."..os.time()
         config.target = config.target.."/"
         config.quality = config.quality or "85%"
end

return config
end


---
-- wraps imagemagick's identify
-- @param path
-- @return w,h
function identify(path)
    local t, w,h  = string.match(stdout("identify "..path), "%w+%s(%w+)%s(%d+)x(%d+)%s")
return w,h
end


function define_maxlevel(x)
for i, v in ipairs(SIZES) do
    if tonumber(x) < v then
       return i
    end
    return #SIZES
end
end


---
-- either send message to stdout or be quiet
function message(msg)
    if not config.quiet then
       io.write(msg.."\n")
    end 
end


---
-- main 
function main()

    config = getargs(arg)

    posix.mkdir(config.tmpdir)
    

    ---- start image process
    local x,y = identify(config.image)
    message("Image resolution is : "..x,y)

    local maxlevel = define_maxlevel(x)
    message("Maximum level is: "..maxlevel)

    message("Imagemagick tmp dir is : "..config.imtmp)

    --os.exit()


    posix.mkdir(config.tmpdir.."/padded")
    posix.mkdir(config.imtmp)

message("resizing and padding image: ")
for i=2, maxlevel do
    message("level "..i)
    stdout("nice -n "..config.nice.." convert "..config.image.." -resize "..SIZES[i].."x -background black -gravity center -extent "..SIZES[i].."x"..SIZES[i].." "..config.tmpdir.."/padded/level"..i..".jpg")
end

message("splitting image into tiles:")
for i=2, maxlevel do
    posix.mkdir(config.tmpdir.."/tiles"..i.."/")
    message("level "..i)
    stdout("env MAGICK_TMPDIR="..config.imtmp.." nice -n "..config.nice.." convert -verbose -quality "..config.quality.." -limit memory 128 -limit map 128 -crop 256x256 "..config.tmpdir.."/padded/level"..i..".jpg "..config.tmpdir.."/tiles"..i.."/tile%03d.jpg")
end

message("creating target directory")
posix.mkdir(config.target)


local function fillup(n)
   local n = tostring(n)
   if #n == 1 then
       n= "00"..n
   elseif #n==2 then
       n= "0"..n
   elseif #n==3 then
       n = n
   end

return n
end

local OFFSETS =  { 4, 8, 16 , 32 , 64 }
local FOLDNUM = { 3, 7, 15 , 31 , 63 }
local num_level = 1

for level = 2, 6 do
    local t_offsets = OFFSETS[num_level]
    local t_foldnum = FOLDNUM[num_level]

message("sorting tiles for level "..level)
posix.mkdir(config.target.."/"..level.."/")
for folder = 0, t_foldnum do
t = folder
message("folder: "..folder)
for i=0, t_foldnum do
  posix.mkdir(config.target.."/"..level.."/"..folder.."/")
  cmd = "mv "..config.tmpdir.."/tiles"..level.."/tile"..fillup(t)..".jpg "..config.target..level.."/"..folder.."/"..i..".jpg"
  stdout(cmd)
  t = t + t_offsets
end
end

num_level = num_level + 1

end

message("cleaning up temporary directories...")
stdout("rm -Rf "..config.tmpdir.."  2> /dev/null")
stdout("rm -Rf "..config.imtmp.."  2> /dev/null")

end


main()
